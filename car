// Класс Car с использованием паттерна Builder
public class Car {

    // Обязательные поля
    private final String brand;
    private final String model;

    // Необязательные поля
    private final String color;
    private final String engineType;
    private final int doors;
    private final boolean hasAirConditioning;

    // Приватный конструктор, вызывается только из Builder
    private Car(Builder builder) {
        this.brand = builder.brand;
        this.model = builder.model;
        this.color = builder.color;
        this.engineType = builder.engineType;
        this.doors = builder.doors;
        this.hasAirConditioning = builder.hasAirConditioning;
    }

    // Геттеры
    public String getBrand() {
        return brand;
    }

    public String getModel() {
        return model;
    }

    public String getColor() {
        return color;
    }

    public String getEngineType() {
        return engineType;
    }

    public int getDoors() {
        return doors;
    }

    public boolean hasAirConditioning() {
        return hasAirConditioning;
    }

    // Вложенный static Builder
    public static class Builder {

        // Обязательные поля
        private final String brand;
        private final String model;

        // Необязательные поля
        private String color = "White";
        private String engineType = "Petrol";
        private int doors = 4;
        private boolean hasAirConditioning = false;

        // Конструктор билдера с обязательными параметрами
        public Builder(String brand, String model) {
            this.brand = brand;
            this.model = model;
        }

        // Методы для задания опциональных параметров
        public Builder color(String color) {
            this.color = color;
            return this;
        }

        public Builder engineType(String engineType) {
            this.engineType = engineType;
            return this;
        }

        public Builder doors(int doors) {
            this.doors = doors;
            return this;
        }

        public Builder airConditioning(boolean hasAirConditioning) {
            this.hasAirConditioning = hasAirConditioning;
            return this;
        }

        // Метод, создающий объект Car
        public Car build() {
            return new Car(this);
        }
    }

    @Override
    public String toString() {
        return "Car {" +
                "brand='" + brand + '\'' +
                ", model='" + model + '\'' +
                ", color='" + color + '\'' +
                ", engineType='" + engineType + '\'' +
                ", doors=" + doors +
                ", airConditioning=" + hasAirConditioning +
                '}';
    }
}
